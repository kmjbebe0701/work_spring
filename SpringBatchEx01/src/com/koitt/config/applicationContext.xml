<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- MySQL 데이터베이스 접속 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/koitt?useSSL=false" />
		<property name="username" value="root" />
		<property name="password" value="koitt" />
	</bean>
	
	
	<!-- 
		Spring Batch 에서 ItemReader를 통해 읽은 내용을 하나의 덩어리(청크/chunk) 가 꽉 찼을때
		ItemProcessor 혹은 ItemWriter로 전달하는데 
		그 덩어리를 한번 전달할 때 마다 트랜젝션이 발생했다고 한다
		(여기서 말하는 트랜젝션 개념은 데이터베이스와 조금 다르다.
		하나의 작업단위를 부르는 것에 대해서는 동일한 의미이다.)
	-->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
	
	<!-- job-meta 테이블 자동으로 생성: JobLauncher, Job, Step 실행 결과를 기록할 테이블 생성 -->
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="org/springframework/batch/core/schema-drop-mysql.sql" />
		<jdbc:script location="org/springframework/batch/core/schema-mysql.sql" />
	</jdbc:initialize-database>
	
	<!-- job-meta를 메모리에 저장할 때 사용 (지금은 사용하지 않으니까 주석처리)-->
	<!-- 
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	-->
	
	<!-- JobRepository 빈 생성: job-meta를 데이터베이스에 저장할 때 사용 -->
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="mysql" />
	</bean>
	
	<!-- JobLauncher 빈 생성: Job을 실행하기 위해 선언 -->
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	<!-- Job과 관련된 스프링 설정은 따로 분리해서 선언하기 위해 import 사용 -->
	<import resource="../jobs/job-csv-to-xml.xml" />
	
</beans>


