<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 스프링 애노테이션 적용 범위 -->
	<context:component-scan base-package="com.koitt"></context:component-scan>
	
	<!--
		Basic Authentication (REST API를 이용하여 로그인하는 방법 중 하나)
		(http element는 선언 된 순서대로 추가되므로 가장 구체적인 패턴을 먼저 선언)
		pattern: 해당 패턴의 url경로로 접근 시, REST API를 이용하겠다는 뜻
		create-session: stateless는 세션을 이용하지 않는다는 뜻
		
		entry-point-ref: 응답관련 코드를 작성한 Bean 객체 이름을 작성
		intercept-url pattern="/rest/**": /rest/ 이하의 모든 경로
		access="permitAll": 모든 사용자가 접근이 가능하다는 뜻
		csrf: REST API에서는 csrf를 사용하지 않기 때문에 disabled를 true로 설정
		cors ref: cors 설정과 관련된 Bean 객체 이름을 작성
	-->
	<sec:http pattern="/rest/**" realm="MY_TEST_REALM"
		create-session="stateless" use-expressions="true">
		
		<sec:http-basic entry-point-ref="customBasicAuthenticationEntryPoint"/>
		<sec:intercept-url pattern="/rest/**" access="permitAll" />
		<sec:csrf disabled="true" />
		<sec:cors ref="corsFilter" />
			
	</sec:http>
	
	<!-- 
		Spring Security Login
		auto-config: 기본 true로 설정
		use-expressions: true일때는 아래의 access 속성과 같이 사용
		intercept-url 앨리먼트: pattern 주소에 접근가능한 권한을 설정하기 위해 사용
			- pattern: 적용범위
			- access: 접근권한
			- 아래의 예는 모든 url 주소에 대해 모든 권한으로 접근 가능하지만
			/admin 이하의 경로는 로그인한 관리자만 접근이 가능하고
			/board 이하의 경로는 로그인한 일반사용자와 관리자만 접근이 가능하다는 뜻이다.
			
		form-login 앨리먼트: 클라이언트의 로그인 폼에 입력한 정보를 전달받을 때
							약속을 정하기 위해 사용
			- login-page: 스프링에게 로그인 페이지 위치를 알려준다.
			- login-processing-url: 스프링이 로그인을 처리할 것이니 클라이언트에게 로그인을 처리할
							주소를 알려주기위해 주소를 원하는 이름으로 작성한다.
			- authentication-failure-url: 로그인이 실패 했을 때 이동할 주소를 스프링에게 알려준다.
			- username-parameter: 클라이언트가 전달할 파라미터(이메일) 이름을 스프링에게 알려준다.
			- password-parameter: 클라이언트가 전달할 파라미터(비밀번호) 이름을 스프링에게 알려준다.
		access-denied-handler 앨리먼트
			- error-page: 로그인한 사용자가 접근 불가한 페이지로 접근 시 보여줄 페이지 설정
		csrf 앨리먼트: 클라이언트 폼 전송 시 보안을 위해 설정				  
	-->
	<sec:http auto-config="true" use-expressions="true">
		<sec:intercept-url pattern="/" access="permitAll" />
		<sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/board/**" 
			access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
			
		<sec:form-login login-page="/login.do"
					login-processing-url="/login-processing"
					authentication-failure-url="/login.do?error=login"
					username-parameter="email"
					password-parameter="password" />
					
		<sec:access-denied-handler error-page="/access-denied.do"/>
		<sec:csrf />
	</sec:http>
	
	<!-- 비밀번호 암호화하기 위해 빈 객체 선언 -->
	<bean id="bcryptEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
		
	<!-- 인증 처리를 위한 클래스 지정 -->
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="customUserDetailsService">
			<sec:password-encoder ref="bcryptEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	<!-- jdbc.properties 파일 불러오기 -->
	<context:property-placeholder location="classpath:/com/koitt/board/jdbc.properties"/>
	
	<!-- 불러온 jdbc.properties 내용을 이용해서 DataSource 빈 객체 만들기 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" 	value="${jdbc.driverClassName}" />
		<property name="url" 				value="${jdbc.url}" />
		<property name="username"			value="${jdbc.username}" />
		<property name="password"			value="${jdbc.password}" />
		<property name="maxActive"			value="${jdbc.maxActive}" />
	</bean>
	
	<!-- 트랜젝션 처리를 위해 TransactionManager 빈 객체 생성 -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 
		트랜젝션 관련 애노테이션 사용하기 위해 설정
		(위에서 만든 TransactionManager 빈 객체를 transaction-manager 속성에 설정)
	-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 
		MyBatis 사용을 위해 추가 1
		mapperLocations 수정: 여러개의 mapper-*.xml 파일을 사용하기 위해 수정
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/com/koitt/board/mybatis.xml" />
		<property name="mapperLocations">
			<array>
				<value>classpath:/com/koitt/board/mapper-*.xml</value>
			</array>
		</property>
	</bean>
	
	<!-- MyBatis 사용을 위해 추가 2 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
</beans>
